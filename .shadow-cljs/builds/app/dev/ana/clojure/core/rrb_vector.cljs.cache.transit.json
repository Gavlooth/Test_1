["^ ","~:output",["^ ","~:js","goog.provide('clojure.core.rrb_vector');\n/**\n * Concatenates the given vectors in logarithmic time.\n */\nclojure.core.rrb_vector.catvec = (function clojure$core$rrb_vector$catvec(var_args){\nvar G__53113 = arguments.length;\nswitch (G__53113) {\ncase 0:\nreturn clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nvar args_arr__4885__auto__ = [];\nvar len__4864__auto___53207 = arguments.length;\nvar i__4865__auto___53208 = (0);\nwhile(true){\nif((i__4865__auto___53208 < len__4864__auto___53207)){\nargs_arr__4885__auto__.push((arguments[i__4865__auto___53208]));\n\nvar G__53209 = (i__4865__auto___53208 + (1));\ni__4865__auto___53208 = G__53209;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4886__auto__ = (new cljs.core.IndexedSeq(args_arr__4885__auto__.slice((4)),(0),null));\nreturn clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__4886__auto__);\n\n}\n});\n\n(clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.core.PersistentVector.EMPTY;\n}));\n\n(clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$1 = (function (v1){\nreturn v1;\n}));\n\n(clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$2 = (function (v1,v2){\nreturn clojure.core.rrb_vector.protocols._splicev(v1,v2);\n}));\n\n(clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$3 = (function (v1,v2,v3){\nreturn clojure.core.rrb_vector.protocols._splicev(clojure.core.rrb_vector.protocols._splicev(v1,v2),v3);\n}));\n\n(clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$4 = (function (v1,v2,v3,v4){\nreturn clojure.core.rrb_vector.protocols._splicev(clojure.core.rrb_vector.protocols._splicev(v1,v2),clojure.core.rrb_vector.protocols._splicev(v3,v4));\n}));\n\n(clojure.core.rrb_vector.catvec.cljs$core$IFn$_invoke$arity$variadic = (function (v1,v2,v3,v4,vn){\nreturn clojure.core.rrb_vector.protocols._splicev(clojure.core.rrb_vector.protocols._splicev(clojure.core.rrb_vector.protocols._splicev(v1,v2),clojure.core.rrb_vector.protocols._splicev(v3,v4)),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(clojure.core.rrb_vector.catvec,vn));\n}));\n\n/** @this {Function} */\n(clojure.core.rrb_vector.catvec.cljs$lang$applyTo = (function (seq53103){\nvar G__53104 = cljs.core.first(seq53103);\nvar seq53103__$1 = cljs.core.next(seq53103);\nvar G__53105 = cljs.core.first(seq53103__$1);\nvar seq53103__$2 = cljs.core.next(seq53103__$1);\nvar G__53106 = cljs.core.first(seq53103__$2);\nvar seq53103__$3 = cljs.core.next(seq53103__$2);\nvar G__53107 = cljs.core.first(seq53103__$3);\nvar seq53103__$4 = cljs.core.next(seq53103__$3);\nvar self__4851__auto__ = this;\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__53104,G__53105,G__53106,G__53107,seq53103__$4);\n}));\n\n(clojure.core.rrb_vector.catvec.cljs$lang$maxFixedArity = (4));\n\n/**\n * Returns a new vector containing the elements of the given vector v\n *   lying between the start (inclusive) and end (exclusive) indices in\n *   logarithmic time. end defaults to end of vector. The resulting\n *   vector shares structure with the original, but does not hold on to\n *   any elements of the original vector lying outside the given index\n *   range.\n */\nclojure.core.rrb_vector.subvec = (function clojure$core$rrb_vector$subvec(var_args){\nvar G__53145 = arguments.length;\nswitch (G__53145) {\ncase 2:\nreturn clojure.core.rrb_vector.subvec.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.core.rrb_vector.subvec.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(clojure.core.rrb_vector.subvec.cljs$core$IFn$_invoke$arity$2 = (function (v,start){\nreturn clojure.core.rrb_vector.protocols._slicev(v,start,cljs.core.count(v));\n}));\n\n(clojure.core.rrb_vector.subvec.cljs$core$IFn$_invoke$arity$3 = (function (v,start,end){\nreturn clojure.core.rrb_vector.protocols._slicev(v,start,end);\n}));\n\n(clojure.core.rrb_vector.subvec.cljs$lang$maxFixedArity = 3);\n\n/**\n * Creates a new vector containing the args.\n */\nclojure.core.rrb_vector.vector = (function clojure$core$rrb_vector$vector(var_args){\nvar G__53155 = arguments.length;\nswitch (G__53155) {\ncase 0:\nreturn clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nvar args_arr__4885__auto__ = [];\nvar len__4864__auto___53219 = arguments.length;\nvar i__4865__auto___53220 = (0);\nwhile(true){\nif((i__4865__auto___53220 < len__4864__auto___53219)){\nargs_arr__4885__auto__.push((arguments[i__4865__auto___53220]));\n\nvar G__53223 = (i__4865__auto___53220 + (1));\ni__4865__auto___53220 = G__53223;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4886__auto__ = (new cljs.core.IndexedSeq(args_arr__4885__auto__.slice((4)),(0),null));\nreturn clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__4886__auto__);\n\n}\n});\n\n(clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$0 = (function (){\nvar arr__53165 = [];\nreturn (new clojure.core.rrb_vector.rrbt.Vector(0,(5),cljs.core.PersistentVector.EMPTY_NODE,arr__53165,null,null));\n}));\n\n(clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$1 = (function (x1){\nvar arr__53178 = [null];\n(arr__53178[(0)] = x1);\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector(1,(5),cljs.core.PersistentVector.EMPTY_NODE,arr__53178,null,null));\n}));\n\n(clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$2 = (function (x1,x2){\nvar arr__53180 = [null,null];\n(arr__53180[(0)] = x1);\n\n(arr__53180[(1)] = x2);\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector(2,(5),cljs.core.PersistentVector.EMPTY_NODE,arr__53180,null,null));\n}));\n\n(clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$3 = (function (x1,x2,x3){\nvar arr__53189 = [null,null,null];\n(arr__53189[(0)] = x1);\n\n(arr__53189[(1)] = x2);\n\n(arr__53189[(2)] = x3);\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector(3,(5),cljs.core.PersistentVector.EMPTY_NODE,arr__53189,null,null));\n}));\n\n(clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$4 = (function (x1,x2,x3,x4){\nvar arr__53198 = [null,null,null,null];\n(arr__53198[(0)] = x1);\n\n(arr__53198[(1)] = x2);\n\n(arr__53198[(2)] = x3);\n\n(arr__53198[(3)] = x4);\n\nreturn (new clojure.core.rrb_vector.rrbt.Vector(4,(5),cljs.core.PersistentVector.EMPTY_NODE,arr__53198,null,null));\n}));\n\n(clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$variadic = (function (x1,x2,x3,x4,xn){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(clojure.core.rrb_vector.vector.cljs$core$IFn$_invoke$arity$4(x1,x2,x3,x4),xn);\n}));\n\n/** @this {Function} */\n(clojure.core.rrb_vector.vector.cljs$lang$applyTo = (function (seq53150){\nvar G__53151 = cljs.core.first(seq53150);\nvar seq53150__$1 = cljs.core.next(seq53150);\nvar G__53152 = cljs.core.first(seq53150__$1);\nvar seq53150__$2 = cljs.core.next(seq53150__$1);\nvar G__53153 = cljs.core.first(seq53150__$2);\nvar seq53150__$3 = cljs.core.next(seq53150__$2);\nvar G__53154 = cljs.core.first(seq53150__$3);\nvar seq53150__$4 = cljs.core.next(seq53150__$3);\nvar self__4851__auto__ = this;\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__53151,G__53152,G__53153,G__53154,seq53150__$4);\n}));\n\n(clojure.core.rrb_vector.vector.cljs$lang$maxFixedArity = (4));\n\n/**\n * Returns a vector containing the contents of coll.\n * \n *   If coll is a vector, returns an RRB vector using the internal tree\n *   of coll.\n */\nclojure.core.rrb_vector.vec = (function clojure$core$rrb_vector$vec(coll){\nif(cljs.core.vector_QMARK_(coll)){\nreturn clojure.core.rrb_vector.rrbt._as_rrbt(coll);\n} else {\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(clojure.core.rrb_vector.vector,coll);\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:author","MichaÅ‚ Marczyk","~:doc","An implementation of the confluently persistent vector data\n  structure introduced in Bagwell, Rompf, \"RRB-Trees: Efficient\n  Immutable Vectors\", EPFL-REPORT-169879, September, 2011.\n\n  RRB-Trees build upon Clojure's PersistentVectors, adding logarithmic\n  time concatenation and slicing.\n\n  The main API entry points are clojure.core.rrb-vector/catvec,\n  performing vector concatenation, and clojure.core.rrb-vector/subvec,\n  which produces a new vector containing the appropriate subrange of\n  the input vector (in contrast to cljs.core/subvec, which returns a\n  view on the input vector).\n\n  The implementation allows for seamless interoperability with\n  cljs.core/PersistentVector and cljs.core.Subvec instances:\n  clojure.core.rrb-vector/catvec and clojure.core.rrb-vector/subvec\n  convert their inputs to clojure.core.rrb-vector.rrbt/Vector\n  instances whenever necessary (this is a very fast constant time\n  operation for PersistentVector; for Subvec it is O(log n), where n\n  is the size of the underlying vector).\n\n  clojure.core.rrb-vector also exports its own versions of vector and\n  vec which always produce clojure.core.rrb-vector.rrbt.Vector\n  instances.","~:file","clojure/core/rrb_vector.cljs","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",28],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.match","~$cljs.core.match","~$clojure.core.async","~$cljs.core.async"],"~:use-macros",["^ ","~$gen-vector-method","~$clojure.core.rrb-vector.macros"],"~:excludes",["~#set",["~$vec","~$vector","~$subvec"]],"~:name","~$clojure.core.rrb-vector","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.core.rrb-vector.protocols","^W","~$clojure.core.rrb-vector.rrbt","^X","~$clojure.core.rrb-vector.interop","^Y","~$cljs.core","^Z","~$goog","^["],"~:seen",["^L",["~:require","~:require-macros"]],"~:uses",["^ ","~$-slicev","^W","~$-splicev","^W","~$-as-rrbt","^X"],"^12",["^ ","^J","^J","^Z","^Z"],"~:form",["~#list",["~$ns","^Q","An implementation of the confluently persistent vector data\n  structure introduced in Bagwell, Rompf, \"RRB-Trees: Efficient\n  Immutable Vectors\", EPFL-REPORT-169879, September, 2011.\n\n  RRB-Trees build upon Clojure's PersistentVectors, adding logarithmic\n  time concatenation and slicing.\n\n  The main API entry points are clojure.core.rrb-vector/catvec,\n  performing vector concatenation, and clojure.core.rrb-vector/subvec,\n  which produces a new vector containing the appropriate subrange of\n  the input vector (in contrast to cljs.core/subvec, which returns a\n  view on the input vector).\n\n  The implementation allows for seamless interoperability with\n  cljs.core/PersistentVector and cljs.core.Subvec instances:\n  clojure.core.rrb-vector/catvec and clojure.core.rrb-vector/subvec\n  convert their inputs to clojure.core.rrb-vector.rrbt/Vector\n  instances whenever necessary (this is a very fast constant time\n  operation for PersistentVector; for Subvec it is O(log n), where n\n  is the size of the underlying vector).\n\n  clojure.core.rrb-vector also exports its own versions of vector and\n  vec which always produce clojure.core.rrb-vector.rrbt.Vector\n  instances.",["^ ","^6","MichaÅ‚ Marczyk"],["^18",["~:refer-clojure","~:exclude",["^N","^M","^O"]]],["^18",["^11",["^W","~:refer",["^14","^15"]],["^X","^1<",["^16"]],"^Y"]],["^18",["^12",["^J","^1<",["^I"]]]]]],"~:flags",["^ ","^11",["^L",[]],"^12",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^[","^Z","^W","^X","^Y"]],"^T","^Q","~:resource-id",["~:shadow.build.classpath/resource","clojure/core/rrb_vector.cljs"],"~:compiled-at",1647704385900,"^R",["^ ","^W","^W","^X","^X","^Y","^Y","^Z","^Z","^[","^[","^J","^J"],"~:resource-name","clojure/core/rrb_vector.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.core.rrb-vector\n\n  \"An implementation of the confluently persistent vector data\n  structure introduced in Bagwell, Rompf, \\\"RRB-Trees: Efficient\n  Immutable Vectors\\\", EPFL-REPORT-169879, September, 2011.\n\n  RRB-Trees build upon Clojure's PersistentVectors, adding logarithmic\n  time concatenation and slicing.\n\n  The main API entry points are clojure.core.rrb-vector/catvec,\n  performing vector concatenation, and clojure.core.rrb-vector/subvec,\n  which produces a new vector containing the appropriate subrange of\n  the input vector (in contrast to cljs.core/subvec, which returns a\n  view on the input vector).\n\n  The implementation allows for seamless interoperability with\n  cljs.core/PersistentVector and cljs.core.Subvec instances:\n  clojure.core.rrb-vector/catvec and clojure.core.rrb-vector/subvec\n  convert their inputs to clojure.core.rrb-vector.rrbt/Vector\n  instances whenever necessary (this is a very fast constant time\n  operation for PersistentVector; for Subvec it is O(log n), where n\n  is the size of the underlying vector).\n\n  clojure.core.rrb-vector also exports its own versions of vector and\n  vec which always produce clojure.core.rrb-vector.rrbt.Vector\n  instances.\"\n\n  {:author \"MichaÅ‚ Marczyk\"}\n\n  (:refer-clojure :exclude [vector vec subvec])\n  (:require [clojure.core.rrb-vector.protocols :refer [-slicev -splicev]]\n            [clojure.core.rrb-vector.rrbt :refer [-as-rrbt]]\n            clojure.core.rrb-vector.interop)\n  (:require-macros [clojure.core.rrb-vector.macros :refer [gen-vector-method]]))\n\n(defn catvec\n  \"Concatenates the given vectors in logarithmic time.\"\n  ([]\n     [])\n  ([v1]\n     v1)\n  ([v1 v2]\n     (-splicev v1 v2))\n  ([v1 v2 v3]\n     (-splicev (-splicev v1 v2) v3))\n  ([v1 v2 v3 v4]\n     (-splicev (-splicev v1 v2) (-splicev v3 v4)))\n  ([v1 v2 v3 v4 & vn]\n     (-splicev (-splicev (-splicev v1 v2) (-splicev v3 v4))\n               (apply catvec vn))))\n\n(defn subvec\n  \"Returns a new vector containing the elements of the given vector v\n  lying between the start (inclusive) and end (exclusive) indices in\n  logarithmic time. end defaults to end of vector. The resulting\n  vector shares structure with the original, but does not hold on to\n  any elements of the original vector lying outside the given index\n  range.\"\n  ([v start]\n     (-slicev v start (count v)))\n  ([v start end]\n     (-slicev v start end)))\n\n(defn vector\n  \"Creates a new vector containing the args.\"\n  ([]\n     (gen-vector-method))\n  ([x1]\n     (gen-vector-method x1))\n  ([x1 x2]\n     (gen-vector-method x1 x2))\n  ([x1 x2 x3]\n     (gen-vector-method x1 x2 x3))\n  ([x1 x2 x3 x4]\n     (gen-vector-method x1 x2 x3 x4))\n  ([x1 x2 x3 x4 & xn]\n     (into (vector x1 x2 x3 x4) xn)\n     #_\n     (loop [v  (vector x1 x2 x3 x4)\n            xn xn]\n       (if xn\n         (recur (-conj ^not-native v (first xn))\n                (next xn))\n         v))))\n\n(defn vec\n  \"Returns a vector containing the contents of coll.\n\n  If coll is a vector, returns an RRB vector using the internal tree\n  of coll.\"\n  [coll]\n  (if (vector? coll)\n    (-as-rrbt coll)\n    (apply vector coll)))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__53113","clojure.core.rrb-vector/catvec","args-arr__4885__auto__","len__4864__auto__","i__4865__auto__","argseq__4886__auto__","cljs.core/IndexedSeq","seq53103","G__53104","cljs.core/first","cljs.core/next","G__53105","G__53106","G__53107","self__4851__auto__","v1","v2","clojure.core.rrb-vector.protocols/-splicev","v3","v4","vn","cljs.core.apply","G__53145","clojure.core.rrb-vector/subvec","js/Error","v","start","clojure.core.rrb-vector.protocols/-slicev","cljs.core/count","end","G__53155","clojure.core.rrb-vector/vector","seq53150","G__53151","G__53152","G__53153","G__53154","arr__53165","clojure.core.rrb-vector.rrbt/Vector","cljs.core/PersistentVector","x1","arr__53178","x2","arr__53180","x3","arr__53189","x4","arr__53198","xn","cljs.core.into","clojure.core.rrb_vector.vector","clojure.core.rrb-vector/vec","coll","cljs.core/vector?","clojure.core.rrb-vector.rrbt/-as-rrbt"]],"~:used-vars",["^L",["~$cljs.core/vector?","~$cljs.core/IndexedSeq","~$clojure.core.rrb-vector/vector","~$cljs.core/count","~$cljs.core/apply","~$clojure.core.rrb-vector.protocols/-slicev","~$cljs.core/into","~$clojure.core.rrb-vector/subvec","~$cljs.core/PersistentVector","~$cljs.core/next","~$clojure.core.rrb-vector/catvec","~$clojure.core.rrb-vector.rrbt/-as-rrbt","~$clojure.core.rrb-vector.rrbt/Vector","~$cljs.core/first","~$clojure.core.rrb-vector.protocols/-splicev","~$js/Error","~$clojure.core.rrb-vector/vec"]]],"~:cache-keys",["~#cmap",[["^1A","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^[","~$goog.dom.HtmlElement"]]],["^1A","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","~$goog.array","~$goog.object","~$goog.labs.userAgent.util","~$goog.string.internal"]]],["^1A","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","~$goog.asserts","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2<"]]],["^1A","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2="]]],["^1A","clojure/core/rrb_vector/rrbt.cljs"],["0404feea925608b921b56acd11d3b187a0d33fe4","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^Z","^W","~$clojure.core.rrb-vector.nodes","~$clojure.core.rrb-vector.trees","~$clojure.core.rrb-vector.transients"]]],["^1A","clojure/core/rrb_vector.cljs"],["0404feea925608b921b56acd11d3b187a0d33fe4","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^Z","^W","^X","^Y"]]],["^1A","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","clojure/core/rrb_vector/trees.cljs"],["0404feea925608b921b56acd11d3b187a0d33fe4","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^Z","^2D"]]],["^1A","clojure/core/rrb_vector/nodes.cljs"],["0404feea925608b921b56acd11d3b187a0d33fe4","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^Z"]]],["^1A","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","clojure/core/rrb_vector/transients.cljs"],["0404feea925608b921b56acd11d3b187a0d33fe4","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^Z","^2D","^2E"]]],["^1A","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2="]]],"~:SHADOW-TIMESTAMP",[1647696447000,1647696447000,1647696451000],["^1A","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2=","~$goog.reflect"]]],["^1A","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2=","~$goog.fs.blob","^2>","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2@","^2A","^2B","^2C"]]],["^1A","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2B","~$goog.html.SafeUrl","^2C","^2=","^2<"]]],["^1A","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2=","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2J","~$goog.html.SafeStyle","^2L","^2?","~$goog.html.uncheckedconversions","^2B","^2<"]]],["^1A","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2B","^2@","^2A","^2J","^2P","~$goog.html.SafeStyleSheet","^2L","~$goog.dom.TagName","^2?","^2C","^2=","~$goog.labs.userAgent.browser","^29","^2:","^2<","~$goog.dom.tags","^2K"]]],["^1A","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2:"]]],["^1A","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1A","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^29","^2=","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1A","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",[]]],["^1A","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^29","^2:"]]],["^1A","clojure/core/rrb_vector/interop.cljs"],["0404feea925608b921b56acd11d3b187a0d33fe4","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^Z","^W","^X"]]],["^1A","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","~$goog.dom.safe","^2Q","^2B","^2<"]]],["^1A","clojure/core/rrb_vector/protocols.cljs"],["0404feea925608b921b56acd11d3b187a0d33fe4","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^Z"]]],["^1A","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","~$goog.labs.userAgent","^2<"]]],["^1A","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2=","^2O","^2J","^2P","^2R","^2L","^2?","^2B","^2<","^2@"]]],["^1A","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^["]]],["^1A","cljs/core.cljs"],["7d51bc68e9eca42c3e2866d92e59ef7939005fc7","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","~$goog.math.Long","~$goog.math.Integer","^2Y","^2:","^29","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1A","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2B","^2C","^2K","^2="]]],["^1A","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2B","^2P","^2C","^2:","^2=","^2<"]]],["^1A","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2H"]]],["^1A","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2=","^2Y"]]],["^1A","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^24",["^ ","^25",null,"^26",["^L",[]],"^27",["^[","^2=","^2C"]]]]],"~:clj-info",["^ ","jar:file:/home/heefoo/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/set.clj",1634010075000,"jar:file:/home/heefoo/.m2/repository/org/clojure/core.rrb-vector/0.1.2/core.rrb-vector-0.1.2.jar!/clojure/core/rrb_vector/macros.clj",1647696466000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/core.cljc",1647696451000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/pprint.clj",1634010075000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/util.cljc",1647696451000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/java/io.clj",1634010075000,"jar:file:/home/heefoo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1647696468000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/externs.clj",1647696451000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/compiler.cljc",1647696451000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/source_map/base64_vlq.clj",1647696451000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/env.cljc",1647696451000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/js_deps.cljc",1647696451000,"jar:file:/home/heefoo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1647696468000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/tagged_literals.cljc",1647696451000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/core.clj",1634010075000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer/impl.cljc",1647696451000,"jar:file:/home/heefoo/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1647696407000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer/passes/and_or.cljc",1647696451000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/source_map.clj",1647696451000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/source_map/base64.clj",1647696451000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/string.clj",1634010075000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer.cljc",1647696451000,"jar:file:/home/heefoo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1647696468000,"jar:file:/home/heefoo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1647696468000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/edn.clj",1634010075000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar!/clojure/instant.clj",1634010075000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/instant.clj",1647696451000,"jar:file:/home/heefoo/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1647696468000,"jar:file:/home/heefoo/.m2/repository/org/clojure/clojurescript/1.11.4/clojurescript-1.11.4.jar!/cljs/analyzer/passes.cljc",1647696451000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","MichaÅ‚ Marczyk","^7","An implementation of the confluently persistent vector data\n  structure introduced in Bagwell, Rompf, \"RRB-Trees: Efficient\n  Immutable Vectors\", EPFL-REPORT-169879, September, 2011.\n\n  RRB-Trees build upon Clojure's PersistentVectors, adding logarithmic\n  time concatenation and slicing.\n\n  The main API entry points are clojure.core.rrb-vector/catvec,\n  performing vector concatenation, and clojure.core.rrb-vector/subvec,\n  which produces a new vector containing the appropriate subrange of\n  the input vector (in contrast to cljs.core/subvec, which returns a\n  view on the input vector).\n\n  The implementation allows for seamless interoperability with\n  cljs.core/PersistentVector and cljs.core.Subvec instances:\n  clojure.core.rrb-vector/catvec and clojure.core.rrb-vector/subvec\n  convert their inputs to clojure.core.rrb-vector.rrbt/Vector\n  instances whenever necessary (this is a very fast constant time\n  operation for PersistentVector; for Subvec it is O(log n), where n\n  is the size of the underlying vector).\n\n  clojure.core.rrb-vector also exports its own versions of vector and\n  vec which always produce clojure.core.rrb-vector.rrbt.Vector\n  instances.","^8","clojure/core/rrb_vector.cljs","^9",9,"^:",5,"^;",9,"^<",28],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",["^ ","^I","^J"],"^K",["^L",["^M","^N","^O"]],"^P","^Q","^R",["^ "],"^U",null,"^V",["^ ","^W","^W","^X","^X","^Y","^Y","^Z","^Z","^[","^["],"^10",["^L",["^11","^12"]],"~:shadow/js-access-global",["^L",["Error"]],"^13",["^ ","^14","^W","^15","^W","^16","^X"],"~:defs",["^ ","~$catvec",["^ ","~:protocol-inline",null,"^5",["^ ","^8","clojure/core/rrb_vector.cljs","^9",44,"^:",7,"^;",44,"^<",13,"~:arglists",["^18",["~$quote",["^18",[[],["~$v1"],["^41","~$v2"],["^41","^42","~$v3"],["^41","^42","^43","~$v4"],["^41","^42","^43","^44","~$&","~$vn"]]]]],"^7","Concatenates the given vectors in logarithmic time.","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",4,"~:max-fixed-arity",4,"~:method-params",[[],["^41"],["^41","^42"],["^41","^42","^43"],["^41","^42","^43","^44"]],"^3[",["^18",[[],["^41"],["^41","^42"],["^41","^42","^43"],["^41","^42","^43","^44"],["^41","^42","^43","^44","~$&","^45"]]],"~:arglists-meta",["^18",[null,null,null,null,null,null]]]],"^P","^1W","^8","clojure/core/rrb_vector.cljs","^<",13,"^46",["^ ","^47",true,"^48",4,"^49",4,"^4:",[[],["^41"],["^41","^42"],["^41","^42","^43"],["^41","^42","^43","^44"]],"^3[",["^18",[[],["^41"],["^41","^42"],["^41","^42","^43"],["^41","^42","^43","^44"],["^41","^42","^43","^44","~$&","^45"]]],"^4;",["^18",[null,null,null,null,null,null]]],"^4:",[[],["^41"],["^41","^42"],["^41","^42","^43"],["^41","^42","^43","^44"]],"~:protocol-impl",null,"^48",4,"^4;",["^18",[null,null,null,null,null,null]],"^:",1,"^47",true,"~:methods",[["^ ","^48",0,"^47",false,"~:tag","~$cljs.core/IVector"],["^ ","^48",1,"^47",false],["^ ","^48",2,"^47",false,"^4>","~$any"],["^ ","^48",3,"^47",false,"^4>","^4@"],["^ ","^48",4,"^47",false,"^4>","^4@"],["^ ","^48",4,"^47",true,"^4>","^4@"]],"^9",44,"^;",44,"^49",4,"~:fn-var",true,"^3[",["^18",[[],["^41"],["^41","^42"],["^41","^42","^43"],["^41","^42","^43","^44"],["^41","^42","^43","^44","~$&","^45"]]],"^7","Concatenates the given vectors in logarithmic time."],"^O",["^ ","^3Z",null,"^5",["^ ","^8","clojure/core/rrb_vector.cljs","^9",60,"^:",7,"^;",60,"^<",13,"^3[",["^18",["^40",["^18",[["~$v","~$start"],["~$v","^4B","~$end"]]]]],"^7","Returns a new vector containing the elements of the given vector v\n  lying between the start (inclusive) and end (exclusive) indices in\n  logarithmic time. end defaults to end of vector. The resulting\n  vector shares structure with the original, but does not hold on to\n  any elements of the original vector lying outside the given index\n  range.","^46",["^ ","^47",false,"^48",3,"^49",3,"^4:",[["~$v","^4B"],["~$v","^4B","^4C"]],"^3[",["^18",[["~$v","^4B"],["~$v","^4B","^4C"]]],"^4;",["^18",[null,null]]]],"^P","^1T","^8","clojure/core/rrb_vector.cljs","^<",13,"^46",["^ ","^47",false,"^48",3,"^49",3,"^4:",[["~$v","^4B"],["~$v","^4B","^4C"]],"^3[",["^18",[["~$v","^4B"],["~$v","^4B","^4C"]]],"^4;",["^18",[null,null]]],"^4:",[["~$v","^4B"],["~$v","^4B","^4C"]],"^4<",null,"^48",3,"^4;",["^18",[null,null]],"^:",1,"^47",false,"^4=",[["^ ","^48",2,"^47",false,"^4>","^4@"],["^ ","^48",3,"^47",false,"^4>","^4@"]],"^9",60,"^;",60,"^49",3,"^4A",true,"^3[",["^18",[["~$v","^4B"],["~$v","^4B","^4C"]]],"^7","Returns a new vector containing the elements of the given vector v\n  lying between the start (inclusive) and end (exclusive) indices in\n  logarithmic time. end defaults to end of vector. The resulting\n  vector shares structure with the original, but does not hold on to\n  any elements of the original vector lying outside the given index\n  range."],"^N",["^ ","^3Z",null,"^5",["^ ","^8","clojure/core/rrb_vector.cljs","^9",72,"^:",7,"^;",72,"^<",13,"^3[",["^18",["^40",["^18",[[],["~$x1"],["^4D","~$x2"],["^4D","^4E","~$x3"],["^4D","^4E","^4F","~$x4"],["^4D","^4E","^4F","^4G","~$&","~$xn"]]]]],"^7","Creates a new vector containing the args.","^46",["^ ","^47",true,"^48",4,"^49",4,"^4:",[[],["^4D"],["^4D","^4E"],["^4D","^4E","^4F"],["^4D","^4E","^4F","^4G"]],"^3[",["^18",[[],["^4D"],["^4D","^4E"],["^4D","^4E","^4F"],["^4D","^4E","^4F","^4G"],["^4D","^4E","^4F","^4G","~$&","^4H"]]],"^4;",["^18",[null,null,null,null,null,null]]]],"^P","^1O","^8","clojure/core/rrb_vector.cljs","^<",13,"^46",["^ ","^47",true,"^48",4,"^49",4,"^4:",[[],["^4D"],["^4D","^4E"],["^4D","^4E","^4F"],["^4D","^4E","^4F","^4G"]],"^3[",["^18",[[],["^4D"],["^4D","^4E"],["^4D","^4E","^4F"],["^4D","^4E","^4F","^4G"],["^4D","^4E","^4F","^4G","~$&","^4H"]]],"^4;",["^18",[null,null,null,null,null,null]]],"^4:",[[],["^4D"],["^4D","^4E"],["^4D","^4E","^4F"],["^4D","^4E","^4F","^4G"]],"^4<",null,"^48",4,"^4;",["^18",[null,null,null,null,null,null]],"^:",1,"^47",true,"^4=",[["^ ","^48",0,"^47",false,"^4>","^1Y"],["^ ","^48",1,"^47",false,"^4>","^1Y"],["^ ","^48",2,"^47",false,"^4>","^1Y"],["^ ","^48",3,"^47",false,"^4>","^1Y"],["^ ","^48",4,"^47",false,"^4>","^1Y"],["^ ","^48",4,"^47",true,"^4>",["^L",[null,"~$clj","^4@"]]]],"^9",72,"^;",72,"^49",4,"^4A",true,"^3[",["^18",[[],["^4D"],["^4D","^4E"],["^4D","^4E","^4F"],["^4D","^4E","^4F","^4G"],["^4D","^4E","^4F","^4G","~$&","^4H"]]],"^7","Creates a new vector containing the args."],"^M",["^ ","^3Z",null,"^5",["^ ","^8","clojure/core/rrb_vector.cljs","^9",94,"^:",7,"^;",94,"^<",10,"^3[",["^18",["^40",["^18",[["~$coll"]]]]],"^7","Returns a vector containing the contents of coll.\n\n  If coll is a vector, returns an RRB vector using the internal tree\n  of coll."],"^P","^21","^8","clojure/core/rrb_vector.cljs","^<",10,"^4:",["^18",[["^4J"]]],"^4<",null,"^4;",["^18",[null,null]],"^:",1,"^47",false,"^9",94,"~:ret-tag","^4@","^;",94,"^49",1,"^4A",true,"^3[",["^18",["^40",["^18",[["^4J"]]]]],"^7","Returns a vector containing the contents of coll.\n\n  If coll is a vector, returns an RRB vector using the internal tree\n  of coll."]],"^12",["^ ","^J","^J","^Z","^Z"],"^1=",["^ ","^11",["^L",[]],"^12",["^L",[]]],"^1>",["^ "],"^1?",["^[","^Z","^W","^X","^Y"]],"^T","^Q","~:ns-specs",["^ "],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^23",[["^4N","~:static-fns"],true,["^4N","~:shadow-tweaks"],null,["^4N","~:source-map-inline"],null,["^4N","~:elide-asserts"],false,["^4N","~:optimize-constants"],null,["^4N","^1D"],null,["^4N","~:external-config"],null,["^4N","~:tooling-config"],null,["^4N","~:emit-constants"],null,["^4N","~:load-tests"],null,["^4N","~:form-size-threshold"],null,["^4N","~:global-goog-object&array"],null,["^4N","~:data-readers"],null,["^4N","~:infer-externs"],"~:auto",["^4N","^1F"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4N","~:fn-invoke-direct"],null,["^4N","~:source-map"],"/dev/null"]]]